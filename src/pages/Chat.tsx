
import React, { useState, useEffect, useRef } from 'react';
import { Helmet } from 'react-helmet';
import { useToast } from "@/hooks/use-toast";
import { 
  Card, 
  CardContent, 
  CardDescription, 
  CardFooter, 
  CardHeader, 
  CardTitle 
} from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Separator } from "@/components/ui/separator";
import { getChatMessages, sendChatMessage } from '@/lib/chatService';
import { Loader2, Send } from 'lucide-react';
import { useAuth } from '@/contexts/AuthContext';

interface Message {
  id: string;
  sender: string;
  recipient: string;
  message: string;
  timestamp: string;
  context_id: string;
}

const Chat: React.FC = () => {
  const { toast } = useToast();
  const { user } = useAuth();
  const [messages, setMessages] = useState<Message[]>([]);
  const [newMessage, setNewMessage] = useState('');
  const [contextId, setContextId] = useState('default-context');
  const [loading, setLoading] = useState(false);
  const [activeAgent, setActiveAgent] = useState('Pilot');
  const messagesEndRef = useRef<HTMLDivElement>(null);
  
  const agents = [
    { id: 'pilot', name: 'Pilot', description: 'Main coordinator' },
    { id: 'writer', name: 'Writer', description: 'Content creation' },
    { id: 'coder', name: 'Code Builder', description: 'Software development' },
    { id: 'researcher', name: 'Researcher', description: 'Data analysis' }
  ];
  
  // Load messages for the current context
  useEffect(() => {
    const loadMessages = async () => {
      try {
        setLoading(true);
        const { data, error } = await getChatMessages(contextId);
        if (error) throw error;
        if (data) setMessages(data);
      } catch (error) {
        console.error('Error loading messages:', error);
        toast({
          title: "Error",
          description: "Failed to load chat messages",
          variant: "destructive"
        });
      } finally {
        setLoading(false);
      }
    };
    
    loadMessages();
    
    // In a real implementation, you would set up a Supabase subscription here
    // to listen for new messages in real-time
    
  }, [contextId, toast]);
  
  // Scroll to bottom of message container when messages update
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);
  
  const handleSendMessage = async () => {
    if (!newMessage.trim()) return;
    
    setLoading(true);
    try {
      const { data, error } = await sendChatMessage({
        sender: 'Leader', // The Leader is always the sender in this UI
        recipient: activeAgent, // Use the selected agent as recipient
        message: newMessage,
        context_id: contextId
      });
      
      if (error) throw error;
      
      if (data) {
        // Update the local state with the new message
        setMessages(prev => [...prev, data]);
        setNewMessage('');
        
        // In a real implementation, you would add code here to:
        // 1. Trigger the AI to generate a response
        // 2. Listen for the AI's response via Supabase Realtime
        
        // Simulate an AI response after a short delay for demo purposes
        setTimeout(async () => {
          const aiResponse = await sendChatMessage({
            sender: activeAgent,
            recipient: 'Leader',
            message: `This is an automated response from ${activeAgent}. In a full implementation, this would be generated by the AI.`,
            context_id: contextId
          });
          
          if (aiResponse.data) {
            setMessages(prev => [...prev, aiResponse.data]);
          }
        }, 1500);
      }
    } catch (error) {
      console.error('Error sending message:', error);
      toast({
        title: "Error",
        description: "Failed to send message",
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  };
  
  // Handle switching between agents
  const handleAgentChange = (agentName: string) => {
    setActiveAgent(agentName);
    // In a real implementation, you might want to create a new context ID
    // or filter messages based on the selected agent
  };
  
  // Render message bubbles based on sender
  const renderMessage = (message: Message) => {
    const isLeader = message.sender === 'Leader';
    
    return (
      <div 
        key={message.id} 
        className={`flex ${isLeader ? 'justify-end' : 'justify-start'} mb-4`}
      >
        <div 
          className={`rounded-lg px-4 py-2 max-w-[80%] ${
            isLeader 
              ? 'bg-pilot-600 text-white' 
              : 'bg-gray-100 dark:bg-gray-800 text-foreground'
          }`}
        >
          <div className="text-sm font-medium mb-1">{message.sender}</div>
          <div className="whitespace-pre-wrap">{message.message}</div>
          <div className="text-xs mt-1 opacity-70">
            {new Date(message.timestamp).toLocaleTimeString()}
          </div>
        </div>
      </div>
    );
  };
  
  return (
    <>
      <Helmet>
        <title>Chat | AI Pilot</title>
      </Helmet>
      
      <div className="space-y-6">
        <div>
          <h1 className="text-3xl font-bold">Leader â†” AI Chat</h1>
          <p className="text-muted-foreground">
            Communicate directly with AI agents
          </p>
        </div>
        
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
          {/* Agent Sidebar */}
          <Card className="md:col-span-1">
            <CardHeader>
              <CardTitle>AI Agents</CardTitle>
              <CardDescription>
                Select an agent to chat with
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-2">
                {agents.map(agent => (
                  <div 
                    key={agent.id}
                    onClick={() => handleAgentChange(agent.name)}
                    className={`p-3 rounded-md cursor-pointer transition-colors ${
                      activeAgent === agent.name 
                        ? 'bg-pilot-500 text-white' 
                        : 'hover:bg-muted'
                    }`}
                  >
                    <div className="font-medium">{agent.name}</div>
                    <div className="text-xs opacity-80">{agent.description}</div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
          
          {/* Chat Area */}
          <Card className="h-[calc(100vh-12rem)] md:col-span-3">
            <CardHeader>
              <CardTitle>Conversation with {activeAgent}</CardTitle>
              <CardDescription>
                Chat context: {contextId}
              </CardDescription>
            </CardHeader>
            
            <CardContent className="overflow-y-auto h-[calc(100%-10rem)]">
              {loading && messages.length === 0 ? (
                <div className="flex items-center justify-center h-full">
                  <Loader2 className="animate-spin text-pilot-500" size={40} />
                </div>
              ) : messages.length === 0 ? (
                <div className="text-center text-muted-foreground py-8">
                  No messages yet. Start the conversation!
                </div>
              ) : (
                <div className="space-y-4">
                  {messages.map(renderMessage)}
                  <div ref={messagesEndRef} />
                </div>
              )}
            </CardContent>
            
            <Separator />
            
            <CardFooter className="pt-4">
              <div className="flex w-full gap-2">
                <Input
                  value={newMessage}
                  onChange={(e) => setNewMessage(e.target.value)}
                  placeholder="Type your message..."
                  onKeyDown={(e) => {
                    if (e.key === 'Enter' && !e.shiftKey) {
                      e.preventDefault();
                      handleSendMessage();
                    }
                  }}
                  disabled={loading}
                />
                <Button 
                  onClick={handleSendMessage} 
                  disabled={loading || !newMessage.trim()}
                  className="flex gap-2 items-center"
                >
                  {loading ? <Loader2 className="animate-spin" size={16} /> : <Send size={16} />}
                  Send
                </Button>
              </div>
            </CardFooter>
          </Card>
        </div>
      </div>
    </>
  );
};

export default Chat;
